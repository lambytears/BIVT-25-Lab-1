name: .NET Tests & Auto-commit

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  push:
    branches-ignore: [main]
  workflow_dispatch:
  issue_comment:

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:

  check-target:
    runs-on: ubuntu-latest
    outputs:
      pr_valid: ${{ steps.check.outputs.pr_valid }}
    steps:
      - name: üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ PR –≤ main
        id: check
        shell: bash
        run: |
          PR_BASE="${{ github.event.pull_request.base.ref || '' }}"
          echo "Base branch: $PR_BASE"
          if [ "$PR_BASE" = "main" ]; then
            echo "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—É –≤ main –≤–µ—Ç–∫—É."
            echo "pr_valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ PR –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ '$PR_BASE', –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã."
            echo "pr_valid=true" >> $GITHUB_OUTPUT
          fi
  tests:
    name: Run test
    runs-on: windows-latest
    needs: check-target
    if: |
      (github.event_name == 'pull_request_target' && needs.check-target.outputs.pr_valid == 'true') ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'issue_comment'
    strategy:
      matrix:
        configuration: [Debug]

    steps:
    - name: Checkout code safely
      uses: actions/checkout@v4
      with:
        # –ë–µ—Ä–µ–º –∫–æ–¥ –∏–∑ head PR —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ PR
        repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
        ref: ${{ github.event.pull_request.head.sha || github.ref }}
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore
      run: dotnet restore Lab1/Lab1.sln

    - name: Build
      run: dotnet build Lab1/Lab1.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests (Purple‚ÜíBlue‚ÜíGreen‚ÜíWhite) (vstest)
      id: cascade
      shell: pwsh
      env:
        CFG: ${{ matrix.configuration }}
      run: |
        $proj = "Lab1test/Lab1test.csproj"
        Write-Host "Building test project..."
        dotnet build $proj -c $Env:CFG

        # –ü—É—Ç—å –∫ dll ‚Äî –ø–æ–ø—Ä–∞–≤—å, –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π target framework
        $dll = Join-Path $PWD "Lab1test\bin\$Env:CFG\net8.0\Lab1test.dll"
        Write-Host "Test DLL: $dll"
        if (-not (Test-Path $dll)) {
          Write-Error "DLL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $dll"
          exit 1
        }

        $colors = @('Purple','Blue','Green','White')

        foreach ($c in $colors) {
          Write-Host "-------------------------------"
          Write-Host "üîé –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞: ${c}Test"

          $filter = "FullyQualifiedName~${c}Test"
          Write-Host "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä: $filter"

          # –û–ø—Ü–∏—è --TestCaseFilter –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ vstest. –õ–æ–≥ TRX —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
          dotnet vstest $dll --TestCaseFilter:"$filter" --Logger:"trx;LogFileName=test-$c.trx"

          $rc = $LASTEXITCODE
          if ($rc -eq 0) {
            Write-Host "‚úÖ –ö–ª–∞—Å—Å ${c}Test –ø—Ä–æ—à—ë–ª (exit $rc). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å–∫–∞–¥."
            exit 0
          } else {
            Write-Host "‚ùå –ö–ª–∞—Å—Å ${c}Test –Ω–µ –ø—Ä–æ—à—ë–ª (exit $rc). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É."
          }
        }

        Write-Host "‚ùå –ù–ò –û–î–ò–ù –∫–ª–∞—Å—Å –Ω–µ –ø—Ä–æ—à—ë–ª."
        exit 1

    - name: Upload TRX
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trx-${{ matrix.configuration }}
        path: '**/test-results.trx'
